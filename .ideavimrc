" ================================================================================================
" = Extensions =====================================
" ================================================================================================
" ds 删除, ys 新增，vS 虚拟化模式增加
" link: https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'

" nerdtree管理文件树
" link: https://github.com/JetBrains/ideavim/wiki/NERDTree-support
" o open ,go open cursor not move , i hsplit , s vsplit
Plug 'preservim/nerdtree'

" 双空格 + w 触发移动, 双空格 + f，触发搜索 使用大写将全选文本, 也可以使用y,c,v功能
Plug 'easymotion/vim-easymotion'

" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set scrolloff=30
set history=200
set easymotion

set number
set relativenumber

" search
set incsearch
set hlsearch
set smartcase
set ignorecase

" ================================================================================================
" = g开头 ====================================
" ================================================================================================
" 寻找下一个错误
nmap ge <action>(GotoNextError)
" 回到上一个错误
nmap gp <action>(GotoPreviousError)
" 进入测试方法
nmap gt <action>(GotoTest)
" 回到函数方法上
nmap gm <action>(MethodUp)
" 寻找接口实现的
nmap gi <action>(GotoImplementation)
" 寻找函数使用的地方
nmap gu <action>(GotoDeclaration)
" 后退
nmap gb <action>(Back)
" 前进
nmap gf <action>(Forward)
" 回到上一次修改的地方
nmap ga '.

" ================================================================================================
" = Ctrl开头 ====================================
" ================================================================================================
" 可视化模式下，选中行可以上下移动
vmap <C-j> <action>(MoveStatementDown)
vmap <C-k> <action>(MoveStatementUp)

" 切换spliter
nmap <C-h> <action>(PrevSplitter)
nmap <C-l> <action>(NextSplitter)

" ================================================================================================
" = 单字母大写 ====================================
" ================================================================================================
" 切换tab
nmap L <action>(NextTab)
nmap H <action>(PreviousTab)

" ================================================================================================
" = 其他 ====================================
" ================================================================================================
" 可视化模式下，paste之后不会替换yank的内容
vmap p "_dp

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
nmap <SPACE> <Nop>
let mapleader=" "

" 格式化代码
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

" lsp: 重命名
nmap <leader>lr <action>(RenameElement)
" 查看错误提示
nmap <leader>li <action>(ShowIntentionActions)

" 关闭搜索高亮
nmap <leader>nh :nohlsearch<CR>

" 查看文件的structure
nmap <leader>ss <action>(FileStructurePopup)
" 查看参数
nmap <leader>sp <action>(ParameterInfo)


" 快速关闭当前窗口
nmap <leader>c :q!<CR>

" 打开project目录
nmap <leader>e :NERDTree<CR>
" 关闭project目录
nmap <leader>E :NERDTreeClose<CR>

" ================================================================================================
" = w开头，窗口相关====================================
" ================================================================================================
" 搜索全局
nmap <leader>fg <action>(FindInPath)

" ================================================================================================
" = w开头，窗口相关====================================
" ================================================================================================
" 关闭所有窗口 ️
nmap <leader>wa <action>(CloseAllEditors)
" 关闭除了激活窗口以外的窗口
nmap <leader>wo <action>(CloseAllEditorsButActive)
" 窗口最大化，并且隐藏其他窗口
nmap <leader>wm <action>(UnsplitAll) \| <action>(HideAllWindows)
" 分离出一个竖直的窗口
nmap <leader>wv <action>(SplitVertically)
" 分离出一个水平的窗口
nmap <leader>wh <action>(SplitHorizontally)

" ================================================================================================
" = e开头，用于抽离方法====================================
" ================================================================================================
" e: 用于抽离方法,可视化模式下，将选中到变量抽离出来
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)

" 输入法自动切换
let context_aware=0
let keep_input_source_in_normal="com.apple.keylayout.ABC"
let keep_input_source_in_insert="com.sogou.inputmethod.sogou.pinyin"
set keep-english-in-normal-and-restore-in-insert

